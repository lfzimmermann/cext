# AI!: insert Iosef Stalin quote here
# =============================================================================
# Makefile for the C Text Editor Project
# =============================================================================

# --- Compiler and Flags ---
CC = gcc
# COMMON_CFLAGS are the common compiler flags for all C sources.
# -g: Adds debugging information for GDB.
# -Wall: Enables all standard warnings.
# -Wextra: Enables extra (but still useful) warnings.
# -std=c11: Use the C11 standard.
# -Iinclude: Tells the compiler to look for header files in the 'include' directory.
# -MMD -MP: Generates dependency files (.d) to track header changes.
COMMON_CFLAGS = -g -Wall -Wextra -std=c11 -Iinclude -MMD -MP

# COMMON_LDFLAGS are common linker flags.
COMMON_LDFLAGS = -L./lib/
# RAYLIB_LDFLAGS are specific linker flags for Raylib.
RAYLIB_LDFLAGS = -lraylib -lm -lGL # Add other Raylib dependencies if needed, e.g., -lGL -lm -lpthread -ldl -lrt -lX11

# --- Project Structure ---
# Names of the final executable files
TARGET_CLI = text_editor
TARGET_GUI = text_editor_gui
TARGET_TEST = main_test # Test executable name

# Directories
BUILD_DIR = build
TEST_DIR = tests
BACKEND_DIR = src/backend
FRONTEND_DIR = src/frontend
ROOT_DIR = .

# VPATH specifies a list of directories for make to search for prerequisites.
VPATH = $(BACKEND_DIR) $(FRONTEND_DIR) $(ROOT_DIR)

# --- Source Files ---
SRC_BACKEND = $(wildcard $(BACKEND_DIR)/*.c)
SRC_FRONTEND = $(wildcard $(FRONTEND_DIR)/*.c)
SRC_CLI_MAIN = main.c
SRC_TESTS = $(wildcard $(TEST_DIR)/*.c)

# --- Object Files ---
# Generate lists of object file names (.o) that will be placed in the BUILD_DIR.
OBJS_BACKEND = $(addprefix $(BUILD_DIR)/, $(notdir $(SRC_BACKEND:.c=.o)))
OBJS_FRONTEND = $(addprefix $(BUILD_DIR)/, $(notdir $(SRC_FRONTEND:.c=.o)))
OBJS_CLI_MAIN = $(addprefix $(BUILD_DIR)/, $(notdir $(SRC_CLI_MAIN:.c=.o)))

# --- Dependency Files ---
# List of dependency files (.d) generated by the -MMD flag for all object files.
DEPS = $(OBJS_BACKEND:.o=.d) $(OBJS_FRONTEND:.o=.d) $(OBJS_CLI_MAIN:.o=.d)

# =============================================================================
# Main Rules
# =============================================================================

# The '.PHONY' target specifies targets that are not actual files.
.PHONY: all cli gui test clean run check

# Default target: build the CLI executable.
all: cli

# Rule to build the CLI executable.
cli: $(TARGET_CLI)

$(TARGET_CLI): $(OBJS_CLI_MAIN) $(OBJS_BACKEND)
	@echo "Linking CLI executable: $@"
	$(CC) $(COMMON_LDFLAGS) -o $@ $^

# Rule to build the GUI executable.
gui: $(TARGET_GUI)

$(TARGET_GUI): $(OBJS_FRONTEND) $(OBJS_BACKEND)
	@echo "Linking GUI executable: $@"
	$(CC) $(COMMON_LDFLAGS) -o $@ $^ $(RAYLIB_LDFLAGS)

# Generic rule to compile source files into object files.
# This rule handles sources from any of the directories specified in VPATH.
$(BUILD_DIR)/%.o: %.c
	@mkdir -p $(@D) # Create build directory if it doesn't exist
	@echo "Compiling: $< -> $@"
	$(CC) $(COMMON_CFLAGS) -c -o $@ $<

# Include the generated dependency files.
# The '-' before 'include' tells make to not complain if the file doesn't exist.
-include $(DEPS)

# =============================================================================
# Utility Rules
# =============================================================================

# Rule to build and run tests.
test: $(BUILD_DIR)/$(TARGET_TEST)
	@echo "Running tests..."
	./$(BUILD_DIR)/$(TARGET_TEST)

$(BUILD_DIR)/$(TARGET_TEST): $(SRC_TESTS) $(OBJS_BACKEND)
	@mkdir -p $(@D)
	@echo "Building test executable: $@"
	$(CC) $(COMMON_CFLAGS) $(COMMON_LDFLAGS) -o $@ $^ -lcunit

# Rule for placeholder checks.
check: $(TARGET_CLI)
	@echo "Running checks... (no specific checks defined)"
	@echo "Check complete."

# Rule to run the CLI program.
# It first ensures the program is built, then executes it.
run: $(TARGET_CLI)
	@echo "--- Running Text Editor (CLI) ---"
	./$(TARGET_CLI)

# Rule to clean the project.
# Removes the executables and the entire build directory.
clean:
	@echo "Cleaning project..."
	rm -f $(TARGET_CLI) $(TARGET_GUI) $(BUILD_DIR)/$(TARGET_TEST)
	rm -rf $(BUILD_DIR)


