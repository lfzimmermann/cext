# AI!: refactor the Makefile to efficiently implement the gui target and clean up potential mistakes i made in the rest of the file.
# =============================================================================
# Makefile for the C Text Editor Project
# =============================================================================

# --- Compiler and Flags ---
# Use gcc as the C compiler
CC = gcc
# CFLAGS are the compiler flags.
# -g: Adds debugging information for GDB.
# -Wall: Enables all standard warnings.
# -Wextra: Enables extra (but still useful) warnings.
# -std=c11: Use the C11 standard.
# -Iinclude: Tells the compiler to look for header files in the 'include' directory.
# -MMD -MP: Generates dependency files (.d) to track header changes.
CFLAGS = -g -Wall -Wextra -std=c11 -Iinclude -MMD -MP

# LDFLAGS are the linker flags (none needed for this simple project yet)
LDFLAGS = -L./lib/ -I./include/

# --- Project Structure ---
# Name of the final executable file
TARGET = text_editor

# Directories
BUILD_DIR = build
TEST_DIR = tests
SRC_DIRS = src/backend src/frontend
FRONTEND_DIR = src/frontend
BACKEND_DIR = src/backend
# --- Source Files ---
# Automatically find all .c files in the specified source directories
# and also include main.c from the root directory.
#
SRCS = $(wildcard $(addsuffix /*.c, $(BACKEND_DIR))) main.c
SRCS_NO_MAIN = $(wildcard $(addsuffix /*.c, $(BACKEND_DIR)))

GUI = $(wildcard $(addsuffix /*.c, $(FRONTEND_DIR)))

# --- Test Files ---
TSTS = $(wildcard $(addsuffix /*.c, $(TEST_DIR)))

# --- Object Files ---
# Generate a list of object file names (.o) that will be placed in the BUILD_DIR.
# This replaces the source directory and .c extension with the build directory and .o extension.
OBJS = $(addprefix $(BUILD_DIR)/, $(notdir $(SRCS:.c=.o)))

# --- Dependency Files ---
# List of dependency files (.d) generated by the -MMD flag
DEPS = $(OBJS:.o=.d)

# =============================================================================
# Main Rules
# =============================================================================

# The '.PHONY' target specifies targets that are not actual files.
# 'all' is the default goal.
.PHONY: all clean run

# Default target: build the executable.
all: $(TARGET)

# Rule to link the final executable.
# It depends on all the object files.
$(TARGET): $(OBJS)
	@echo "Linking executable: $@"
	$(CC) $(LDFLAGS) -o $@ $^

# Rule to compile source files into object files.
# This rule handles sources from any of the specified SRC_DIRS.
# VPATH tells make where to find the source files.
VPATH = $(SRC_DIRS)
$(BUILD_DIR)/%.o: %.c
	@mkdir -p $(@D)
	@echo "Compiling: $<"
	$(CC) $(CFLAGS) -c -o $@ $<

# Include the generated dependency files.
# The '-' before 'include' tells make to not complain if the file doesn't exist.
-include $(DEPS)


gui: $(GUI)
	gcc -o $(BUILD_DIR)/$@ $^ $(LDFLAGS) -lraylib


# =============================================================================
# Utility Rules
# =============================================================================

test: $(TSTS)
	@echo "Running tests... "
	gcc -o $(BUILD_DIR)/main_test $(TSTS) $(SRCS_NO_MAIN) -lcunit
	./$(BUILD_DIR)/main_test


check: $(TARGET)
	@echo "Running checks... (no tests defined)"
	@echo "Check complete."

# Rule to create a distributable tarball.
dist:
	@echo "Creating distribution tarball..."
	@# Ensure we have a README for a proper distribution
	@touch -a README.md
	tar -czf $(TARGET)-$(VERSION).tar.gz --transform='s,^,$(TARGET)-$(VERSION)/,' $(DIST_FILES)

# Rule to check if the distribution tarball is self-contained and builds correctly.
distcheck: dist
	@echo "Verifying distribution tarball..."
	gzip -t $(TARGET)-$(VERSION).tar.gz
	rm -rf $(TARGET)-$(VERSION)
	tar -xzf $(TARGET)-$(VERSION).tar.gz
	$(MAKE) -C $(TARGET)-$(VERSION) all
	$(MAKE) -C $(TARGET)-$(VERSION) check
	$(MAKE) -C $(TARGET)-$(VERSION) clean
	rm -rf $(TARGET)-$(VERSION)
	@echo "Distribution check PASSED."

# Rule to run the program.
# It first ensures the program is built, then executes it.
run: $(TARGET)
	@echo "--- Running Text Editor ---"
	./$(TARGET)

# Rule to clean the project.
# Removes the executable and the entire build directory.
clean:
	@echo "Cleaning project..."
	rm -f $(TARGET)
	rm -rf $(BUILD_DIR)


